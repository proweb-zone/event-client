// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: getaway.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventGateway_Subscribe_FullMethodName = "/gateway.EventGateway/Subscribe"
	EventGateway_Publish_FullMethodName   = "/gateway.EventGateway/Publish"
)

// EventGatewayClient is the client API for EventGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventGatewayClient interface {
	// Микросервисы используют этот endpoint для подписки
	Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error)
	// Микросервисы используют этот endpoint для публикации
	Publish(ctx context.Context, in *Event, opts ...grpc.CallOption) (*PublishResponse, error)
}

type eventGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewEventGatewayClient(cc grpc.ClientConnInterface) EventGatewayClient {
	return &eventGatewayClient{cc}
}

func (c *eventGatewayClient) Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventGateway_ServiceDesc.Streams[0], EventGateway_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscriptionRequest, Event]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventGateway_SubscribeClient = grpc.ServerStreamingClient[Event]

func (c *eventGatewayClient) Publish(ctx context.Context, in *Event, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, EventGateway_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventGatewayServer is the server API for EventGateway service.
// All implementations must embed UnimplementedEventGatewayServer
// for forward compatibility.
type EventGatewayServer interface {
	// Микросервисы используют этот endpoint для подписки
	Subscribe(*SubscriptionRequest, grpc.ServerStreamingServer[Event]) error
	// Микросервисы используют этот endpoint для публикации
	Publish(context.Context, *Event) (*PublishResponse, error)
	mustEmbedUnimplementedEventGatewayServer()
}

// UnimplementedEventGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventGatewayServer struct{}

func (UnimplementedEventGatewayServer) Subscribe(*SubscriptionRequest, grpc.ServerStreamingServer[Event]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedEventGatewayServer) Publish(context.Context, *Event) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedEventGatewayServer) mustEmbedUnimplementedEventGatewayServer() {}
func (UnimplementedEventGatewayServer) testEmbeddedByValue()                      {}

// UnsafeEventGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventGatewayServer will
// result in compilation errors.
type UnsafeEventGatewayServer interface {
	mustEmbedUnimplementedEventGatewayServer()
}

func RegisterEventGatewayServer(s grpc.ServiceRegistrar, srv EventGatewayServer) {
	// If the following call pancis, it indicates UnimplementedEventGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventGateway_ServiceDesc, srv)
}

func _EventGateway_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventGatewayServer).Subscribe(m, &grpc.GenericServerStream[SubscriptionRequest, Event]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventGateway_SubscribeServer = grpc.ServerStreamingServer[Event]

func _EventGateway_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventGatewayServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventGateway_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventGatewayServer).Publish(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

// EventGateway_ServiceDesc is the grpc.ServiceDesc for EventGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.EventGateway",
	HandlerType: (*EventGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _EventGateway_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _EventGateway_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "getaway.proto",
}
